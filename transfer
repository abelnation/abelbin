#!/usr/local/bin/python

import sys, os, argparse
import subprocess, shlex
import pipes, tempfile

debug = False
def debug_print(str):
    global debug
    if debug:
        print str
        sys.stdout.flush()

def get_empty_tmp_file():
    return tempfile.NamedTemporaryFile(mode='r+')

def run_commands_as_pipe_series(commands):
    global debug

    tmp = get_empty_tmp_file()
    p = pipes.Template()

    if debug:
        p.debug(True)

    for command in commands:
        # ensure we are using normal strings (not unicode)
        command_str = command.encode('ascii','ignore')
        if len(command) != len(command_str):
            print "Error: cmd has unusable unicode str: %s" % command.encode('ascii', 'replace')

        print command_str
        p.append(command_str, '--')

    f = p.open(tmp.name, 'w')
    f.close()

    out_lines = open(tmp.name, 'r').readlines()
    return "\n".join([line.strip() for line in out_lines]);

def run_command(command, useShell = False):
    p = None
    if isinstance(command, list):
        debug_print(" ".join(command))
        p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=useShell)
    elif isinstance(command, basestring):
        command_str = command.encode('ascii','ignore')
        if len(command) != len(command_str):
            print "Error: cmd has unusable unicode str: %s" % command.encode('ascii', 'replace')
            return None, None

        debug_print(command)
        p = subprocess.Popen(shlex.split(command_str), stdout=subprocess.PIPE)
    else:
        print "Error: invalid arg (need str or array): %s" % command
        return None, None

    return p.communicate()

def parse_args():

	def existing_file(filepath):
		if filepath == "":
			return argparse.ArgumentTypeError("Please enter a filepath")
		if not os.path.exists(filepath):
			raise argparse.ArgumentTypeError("%s is not a valid file" % filepath)
		return filepath

	parser = argparse.ArgumentParser(description="""
Upload a file and receive a link for easy file transfer
""")

	parser.add_argument('-e','--encrypt', default=False, action='store_true',
        help='Encrypt file with password before sending (NOT IMPLEMENTED)')

	parser.add_argument('-D','--debug', action='store_true',
        help='Enable debug mode')

	parser.add_argument('path', nargs=1, type=existing_file,
        help='Path of file to transfer')

	args = parser.parse_args()
	return args

def main():
	global debug
	args = parse_args()
	debug = args.debug

	print "Transfering file..."

	filepath = args.path[0]
	filename = os.path.basename(filepath)
	run_commands_as_pipe_series([
		"curl --upload-file %s https://transfer.sh/%s" % (filepath, filename),
		"tee /dev/stderr",
		"pbcopy"
	])

	print "Your URL has been copied to the clipboard"

if __name__ == '__main__':
	main()